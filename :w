#version 330 core

layout(location = 0) in vec3 vertices;
layout(location = 1) in vec2 uv;
layout(location = 3) in vec3 xyz;

// Output data ; will be interpolated for each fragment.
out VertexData {
  vec3 position;
  vec2 UV;
  vec3 normal;
  vec3 light_dir_tangentspace;
  vec3 eye_dir_tangentspace;
} out_data;

// Model-View-Projection matrix, but without the Model (the position is in BillboardPos; the orientation depends on the camera)
uniform mat4 VP; 

void main() {
  vec3 vertex_pos_worldspace = xyz + vertices;

  out_data.position = vertex_pos_worldspace;
  out_data.UV = uv;
  // out_data.normal = (V * M * normal).xyz; 

  // Output position of the vertex
  clip_space = VP * vec4(vertex_pos_worldspace, 1.0f);
  gl_Position = clip_space;
}
